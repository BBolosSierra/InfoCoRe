// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_eig
void get_eig(const arma::Mat<double>& x, arma::vec& eigval, arma::Mat<double>& eigvec);
RcppExport SEXP _infoCoRe_get_eig(SEXP xSEXP, SEXP eigvalSEXP, SEXP eigvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eigval(eigvalSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double>& >::type eigvec(eigvecSEXP);
    get_eig(x, eigval, eigvec);
    return R_NilValue;
END_RCPP
}
// get_eig_cx
void get_eig_cx(const arma::Mat<std::complex<double>>& x, arma::cx_vec& eigval, arma::Mat<std::complex<double>>& eigvec);
RcppExport SEXP _infoCoRe_get_eig_cx(SEXP xSEXP, SEXP eigvalSEXP, SEXP eigvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<std::complex<double>>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec& >::type eigval(eigvalSEXP);
    Rcpp::traits::input_parameter< arma::Mat<std::complex<double>>& >::type eigvec(eigvecSEXP);
    get_eig_cx(x, eigval, eigvec);
    return R_NilValue;
END_RCPP
}
// laplacian
arma::Mat<double> laplacian(const arma::SpMat<double>& Adj, Rcpp::IntegerVector norm);
RcppExport SEXP _infoCoRe_laplacian(SEXP AdjSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type Adj(AdjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(laplacian(Adj, norm));
    return rcpp_result_gen;
END_RCPP
}
// laplacian_cx
arma::Mat<std::complex<double>> laplacian_cx(const arma::SpMat<double>& Adj, Rcpp::IntegerVector weighted, Rcpp::IntegerVector norm);
RcppExport SEXP _infoCoRe_laplacian_cx(SEXP AdjSEXP, SEXP weightedSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type Adj(AdjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type norm(normSEXP);
    rcpp_result_gen = Rcpp::wrap(laplacian_cx(Adj, weighted, norm));
    return rcpp_result_gen;
END_RCPP
}
// driver
void driver(const arma::SpMat<double>& Adj, Rcpp::IntegerVector weighted, Rcpp::IntegerVector directed, Rcpp::IntegerVector norm);
RcppExport SEXP _infoCoRe_driver(SEXP AdjSEXP, SEXP weightedSEXP, SEXP directedSEXP, SEXP normSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::SpMat<double>& >::type Adj(AdjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type directed(directedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type norm(normSEXP);
    driver(Adj, weighted, directed, norm);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_infoCoRe_get_eig", (DL_FUNC) &_infoCoRe_get_eig, 3},
    {"_infoCoRe_get_eig_cx", (DL_FUNC) &_infoCoRe_get_eig_cx, 3},
    {"_infoCoRe_laplacian", (DL_FUNC) &_infoCoRe_laplacian, 2},
    {"_infoCoRe_laplacian_cx", (DL_FUNC) &_infoCoRe_laplacian_cx, 3},
    {"_infoCoRe_driver", (DL_FUNC) &_infoCoRe_driver, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_infoCoRe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
